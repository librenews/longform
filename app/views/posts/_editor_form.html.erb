<%= form_with model: post, local: true, data: { 
      controller: "editor",
      editor_save_url_value: post.persisted? ? post_path(post) : posts_path
    } do |form| %>
    
    <!-- Title -->
    <div style="margin-bottom: 3rem;">
      <%= form.text_field :title, 
          placeholder: "Post title...", 
          style: "font-size: 2.5rem; font-weight: 600; border: none; outline: none; width: 100%; background: transparent; padding: 0; font-family: 'Inter', sans-serif;",
          data: { 
            action: "input->editor#autoSave",
            target: "editor.title"
          } %>
    </div>
    
    <!-- Rich Text Editor -->
    <div style="margin-bottom: 3rem;">
      <%= form.rich_text_area :content,
          placeholder: post.persisted? ? "Continue writing your longform post..." : "Start writing your longform post...",
          style: "min-height: 60vh; font-size: 1.125rem; line-height: 1.7; border: none;",
          data: {
            target: "editor.content",
            action: "trix-change->editor#trixChange"
          } %>
    </div>
    
    <!-- Actions -->
    <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 2rem; border-top: 1px solid var(--pico-muted-border-color);">
      <div class="writing-stats" style="font-size: 0.875rem; color: var(--pico-muted-color);">
        <span>Words: <strong id="word-count"><%= post.persisted? ? post.word_count : 0 %></strong></span>
        <span style="margin-left: 1rem;">Reading time: <strong id="reading-time"><%= post.persisted? ? post.reading_time_minutes : 0 %> min</strong></span>
      </div>
      
      <div style="display: flex; gap: 1rem;">
        <!-- Save as Draft -->
        <%= form.submit "Save Draft", 
            style: "background: white; border: 1px solid var(--pico-muted-border-color); color: #374151; padding: 0.75rem 1.5rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease; font-family: 'Inter', sans-serif; font-weight: 500;",
            name: "draft",
            data: { 
              action: "click->editor#saveDraft",
              disable_with: "Saving..."
            } %>
        
        <!-- Publish -->
        <%= form.submit "Publish", 
            style: "background: var(--pico-primary-background); border: 1px solid var(--pico-primary-border); color: white; padding: 0.75rem 1.5rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease; font-family: 'Inter', sans-serif; font-weight: 500;",
            name: "publish",
            value: "Publish",
            data: { 
              action: "click->editor#publish",
              disable_with: "Publishing...",
              confirm: post.persisted? ? "This will update your published post on Bluesky. Continue?" : "Ready to publish this post to Bluesky?"
            } %>
      </div>
    </div>
  <% end %>

  <!-- Medium-style Formatting Toolbar -->
  <div id="formatting-toolbar" class="formatting-toolbar" style="display: none;">
    <button type="button" data-action="bold" title="Bold (Ctrl+B)">
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"/>
      </svg>
    </button>
    
    <button type="button" data-action="italic" title="Italic (Ctrl+I)">
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"/>
      </svg>
    </button>
    
    <button type="button" data-action="link" title="Add Link (Ctrl+K)">
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/>
      </svg>
    </button>
    
    <button type="button" data-action="quote" title="Quote">
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M6 17h3l2-4V7H5v6h3zm8 0h3l2-4V7h-6v6h3z"/>
      </svg>
    </button>
  </div>

  <style>
    .formatting-toolbar {
      position: absolute;
      background: #1a1a1a;
      border-radius: 8px;
      padding: 8px;
      display: flex;
      gap: 4px;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      border: 1px solid #333;
    }
    
    .formatting-toolbar button {
      background: transparent;
      border: none;
      color: white;
      padding: 8px;
      border-radius: 4px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }
    
    .formatting-toolbar button:hover {
      background: #333;
    }
    
    .formatting-toolbar button.active {
      background: #007acc;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const toolbar = document.getElementById('formatting-toolbar');
      const trixEditor = document.querySelector('trix-editor');
      let selection = null;
      let trixSelection = null;
      
      if (!trixEditor) return;
      
      // Store Trix editor reference
      let editor = null;
      trixEditor.addEventListener('trix-initialize', function() {
        editor = trixEditor.editor;
      });
      
      // Show toolbar on text selection
      document.addEventListener('mouseup', function(e) {
        setTimeout(() => {
          if (!editor) return;
          
          const sel = window.getSelection();
          if (sel.rangeCount > 0 && !sel.isCollapsed) {
            const range = sel.getRangeAt(0);
            const rect = range.getBoundingClientRect();
            
            // Check if selection is within the trix editor
            if (trixEditor.contains(range.commonAncestorContainer) || 
                trixEditor.contains(range.startContainer) ||
                trixEditor.contains(range.endContainer)) {
              
              selection = sel;
              trixSelection = editor.getSelectedRange();
              showToolbar(rect);
            }
          } else {
            hideToolbar();
          }
        }, 10);
      });
      
      // Hide toolbar on click outside
      document.addEventListener('mousedown', function(e) {
        if (!toolbar.contains(e.target) && e.target !== trixEditor) {
          setTimeout(hideToolbar, 10);
        }
      });
      
      function showToolbar(rect) {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        
        toolbar.style.display = 'flex';
        toolbar.style.top = (rect.top + scrollTop - toolbar.offsetHeight - 10) + 'px';
        toolbar.style.left = (rect.left + scrollLeft + (rect.width / 2) - (toolbar.offsetWidth / 2)) + 'px';
        
        updateToolbarState();
      }
      
      function hideToolbar() {
        toolbar.style.display = 'none';
        selection = null;
        trixSelection = null;
      }
      
      function updateToolbarState() {
        if (!editor) return;
        
        const buttons = toolbar.querySelectorAll('button');
        buttons.forEach(button => {
          button.classList.remove('active');
        });
        
        // Get current selection attributes
        const range = editor.getSelectedRange();
        if (range) {
          const attributes = editor.getDocument().getCommonAttributesAtRange(range);
          
          if (attributes.bold) {
            const boldBtn = toolbar.querySelector('[data-action="bold"]');
            if (boldBtn) boldBtn.classList.add('active');
          }
          if (attributes.italic) {
            const italicBtn = toolbar.querySelector('[data-action="italic"]');
            if (italicBtn) italicBtn.classList.add('active');
          }
          if (attributes.href) {
            const linkBtn = toolbar.querySelector('[data-action="link"]');
            if (linkBtn) linkBtn.classList.add('active');
          }
          if (attributes.quote) {
            const quoteBtn = toolbar.querySelector('[data-action="quote"]');
            if (quoteBtn) quoteBtn.classList.add('active');
          }
        }
      }
      
      // Handle toolbar button clicks
      toolbar.addEventListener('click', function(e) {
        e.preventDefault();
        const button = e.target.closest('button');
        if (!button || !editor) return;
        
        const action = button.getAttribute('data-action');
        
        // Get current selection and attributes
        const range = editor.getSelectedRange();
        const attributes = editor.getDocument().getCommonAttributesAtRange(range);
        
        switch (action) {
          case 'bold':
            if (attributes.bold) {
              editor.deactivateAttribute('bold');
            } else {
              editor.activateAttribute('bold');
            }
            break;
          case 'italic':
            if (attributes.italic) {
              editor.deactivateAttribute('italic');
            } else {
              editor.activateAttribute('italic');
            }
            break;
          case 'link':
            if (attributes.href) {
              editor.deactivateAttribute('href');
            } else {
              const url = prompt('Enter URL:');
              if (url) {
                editor.activateAttribute('href', url);
              }
            }
            break;
          case 'quote':
            if (attributes.quote) {
              editor.deactivateAttribute('quote');
            } else {
              editor.activateAttribute('quote');
            }
            break;
        }
        
        // Update toolbar state after a brief delay to let Trix process the change
        setTimeout(updateToolbarState, 50);
      });
      
      // Keyboard shortcuts
      trixEditor.addEventListener('keydown', function(e) {
        if (!editor) return;
        
        if (e.ctrlKey || e.metaKey) {
          switch (e.key) {
            case 'b':
              e.preventDefault();
              const range = editor.getSelectedRange();
              const attributes = editor.getDocument().getCommonAttributesAtRange(range);
              if (attributes.bold) {
                editor.deactivateAttribute('bold');
              } else {
                editor.activateAttribute('bold');
              }
              break;
            case 'i':
              e.preventDefault();
              const italicRange = editor.getSelectedRange();
              const italicAttrs = editor.getDocument().getCommonAttributesAtRange(italicRange);
              if (italicAttrs.italic) {
                editor.deactivateAttribute('italic');
              } else {
                editor.activateAttribute('italic');
              }
              break;
            case 'k':
              e.preventDefault();
              const linkRange = editor.getSelectedRange();
              const linkAttrs = editor.getDocument().getCommonAttributesAtRange(linkRange);
              if (linkAttrs.href) {
                editor.deactivateAttribute('href');
              } else {
                const url = prompt('Enter URL:');
                if (url) {
                  editor.activateAttribute('href', url);
                }
              }
              break;
          }
        }
      });
    });
  </script>
